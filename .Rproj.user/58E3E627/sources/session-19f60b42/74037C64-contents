---
title: "Ants species coexistence"
format: 
  html: 
    theme: zephyr
    toc: true
    toc-location: left
editor: visual
page-layout: full
---

```{r setup, error = FALSE, warning = FALSE, message = FALSE, results = "hide"}
library(dplyr)
library(tidyr)
library(ggplot2)
library(performance)
library(glmmTMB)
library(vegan)
library(ggvegan)
library(FD)
library(picante)
library(gridExtra)
```

# Functions

```{r}
multiple.func <- function(x) {
      c(mean = mean(x), sd = sd(x))}
```

# Data Cleaning

```{r}

#see Cleaning.R in scripts folder for data cleaning
wide <- read.csv("Clean Data/ants_wide.csv")
cov <- read.csv("Clean Data/ants.csv")
site_data <- read.csv("Clean Data/sites_joined.csv")
cov <- right_join(site_data, cov, by = c("Site", "month"))

cov <- dplyr::select(cov, 3:10, 14:19, 22:36, 39:41)

#total count of ants
sum(cov$abun)

#add ecostress sensor data
eco <- read.csv("Clean Data/ecostress.csv")
eco <- select(eco, 1, 2, 11)
eco <- rename(eco, month = Category, Site = ID, esi = ECO4ESIPTJPL_001_Evaporative_Stress_Index_PT_JPL_ESIavg)
cov <- right_join(eco, cov, by = c("Site", "month"))

#read in foundation plant identity for the sites
shrubs <- read.csv("Clean Data/shrubs.csv")
cov <- right_join(cov, shrubs, by = "Site")
cov$shrub.site <- as.factor(cov$shrub.site)


#read in ndvi and soil data
ndvi <- read.csv("raw data/sites_remotesensing.csv")
ndvi <- select(ndvi, 7:17) %>%
  rename(Site = site)
ndvi$Site <- gsub("MoV", "Mov", ndvi$Site)
cov <- right_join(cov, ndvi, by = c("Site", "month"))
cov$sites <- paste(cov$Site, cov$month)
```

```{r}

#cleaning the raw trait data
traits <- read.csv("raw data/Traits.csv")

#check for spelling mistakes in trait labels
unique(traits$Trait)
#I don't trust the eye width measurements because they were measured from the front
traits <- filter(traits, Trait != "Eye width")
#unique(traits$Photo)

#extract site IDs from photo names
traits <- separate(traits, Photo, c("Site", "Slide", "Specimen"))
traits$Site <- gsub("Papl", "PaPl", traits$Site)
unique(traits$Site)
traits <- traits[-1,]

#remove the double pheidole entry
traits <- traits[-2,]

#need to divide the trait values by weber's body length. I want to do this at the individual level, not dividing means by mean webers
traits <- select(traits, -X, -Label)
traits <- pivot_wider(traits, names_from = Trait, values_from = Measure)
traits <- mutate(traits, Femur.w = Femur/Webers, Scape.w = Scape/Webers, Mandible.w = `Mandible length`/Webers, Headl.w = `Head length`/Webers, Eyel.w = `Eye length`/Webers, Headw.w = `Head width`/Webers)
traits <- pivot_longer(traits, 5:17, names_to = "Trait", values_to = "Measure")

#check for ant species name typoes
unique(traits$X.1)

#some traits are NA because of damage to the specimen
traits <- drop_na(traits)

#calculate the mean value of the trait for each species at each site (population level trait values)
traits.ag <- group_by(traits, Site, X.1, Trait) %>%
  summarise(mean = mean(Measure), sd = sd(Measure))

#create a data frame of the mean values for each species across all sites (species level trait values)
traits.sp <- group_by(traits, X.1, Trait) %>% 
  summarise(mean = mean(Measure), sd = sd(Measure))
```

## Calculations

```{r}
#convert to presence absence

long.pres <- pivot_longer(wide, 2:14, names_to = "species", values_to = "count")

long.pres <- mutate(long.pres, count.bin = ifelse(count >= 1, 1, 0))


#get total abundance per trap
long.pres <- group_by(long.pres, uniID) %>% 
  mutate(total = sum(count.bin)) 

#calculate relative abundances
long.pres <- long.pres %>% mutate(rel.abun = count.bin/total)

traits.ag <- rename(traits.ag, species = X.1)
traits.ag$species <- gsub(" ", "", traits.ag$species)

#add sites to long
long.pres <- cov %>% select(Site, uniID) %>% right_join(long.pres, . , by = 'uniID')
#this adds NA traits to 0 abundances - species isn't found at pitfall or site


```

```{r}
#make a presence/absence pitfall trap data frame
spe.bin <- long.pres
spe.bin <- select(spe.bin, 2, 3, 5)
spe.bin <- pivot_wider(spe.bin, names_from = species, values_from = count.bin)
spe.bin <- select(spe.bin, -11, -12)
```

# PCA

## Traits - Invidividuals

```{r}
# I want the PCA on traits
# make it wide again

traits.wide <- pivot_wider(traits, names_from = Trait, values_from = Measure)
#keep only weber length standardized traits
traits.wide <- select(traits.wide, 11:17)
traits.wide <- drop_na(traits.wide)

traits.st <- decostand(traits.wide, method = "standardize")
traits.pca <- rda(traits.st)

#summary(traits.pca)
biplot(traits.pca, xlab = "PCA 33.9%", ylab = "PCA 32.9%")
#PC3 is ~15%

```

## Populations

```{r}

trait.pop <- traits.ag
trait.pop$spepop <- paste(trait.pop$species, trait.pop$Site)
trait.pop <- ungroup(trait.pop) %>% select(spepop, Trait, mean)
trait.pop <- pivot_wider(trait.pop, names_from = Trait, values_from = mean)
trait.pop <- select(trait.pop, 1, 3, 5, 8, 9, 11, 13, 14)

trait.pop.st <- select(trait.pop, -1) %>% decostand(method = "standardize")
#rename the column names for the figure
colnames(trait.pop.st) <- c("Eye length", "Femur length", "Head \n length", "Head\n Width", "Mandible\n length", "Scape length", "Weber's \nbody length")
trait.pop.pca <- rda(trait.pop.st)
summary(trait.pop.pca)
pcplot1 <- autoplot(trait.pop.pca, xlab = "PCA Axis 1 (35.8%)", ylab = "PCA Axis 2 (32.2%)") +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black")) + theme(legend.position = "none")  + xlim(-1.5, 1.8)


pcplot1

#PCA3 ~ 16%
```

## Sites - site-level

```{r}

env2 <- select(cov, 3:5, 8, 12:15, 37:43, sites) %>% drop_na() %>% distinct()
env2_sitelabels <- env2$sites
env2 <- select(env2, -sites)

#standardize to mean of zero etc

env.d2 <- decostand(env2, method = "standardize")
env.pca2 <- rda(env.d2)

a <- summary(env.pca2)
b <- a$cont$importance
prop1 <- b[2,1] * 100 
prop1 <- round(prop1, digits = 2)
prop2 <- b[2,2] * 100
prop2 <- round(prop2, digits = 2)    
#summary(env.pca2)
#autoplot(env.pca2, xlab = paste("PCA", prop1), ylab = paste("PCA", prop2))
#sitescores <- scores(env.pca2, c(1,2, 3), 'sites')

envreduce <- select(env2, -esi, -arid, -10, -12, -13, -14)
env.reduce <- decostand(envreduce, method = "standardize")
colnames(env.reduce) <- c("Mean Cover", "Variation Cover", "Mean Veg Height", "Mean Annual \n Temperature", "Mean Annual \n Precipitation", "Maximum \n Temperature", "NDVI", "Mean Soil Temp", "Range Soil Temp")
  
env.pcareduce <- rda(env.reduce)

a <- summary(env.pcareduce)

b <- a$cont$importance
prop1 <- b[2,1] * 100 
prop1 <- round(prop1, digits = 2)
prop2 <- b[2,2] * 100
prop2 <- round(prop2, digits = 2)    
summary(env.pcareduce)

pcplot2 <- autoplot(env.pcareduce , xlab = paste("PCA Axis 1 (", prop1, "%)", sep = ""), ylab = paste("PCA Axis 2 (", prop2, "%)", sep = "")) + xlim(-1.5, 1.6) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black")) + theme(legend.position = "none") + theme(text=element_text(size=13))  


pcplot2



sitescores <- scores(env.pcareduce, c(1,2), display = 'sites')
sitescores <- as.data.frame(cbind(sitescores, env2_sitelabels))


```

```{r}

#Figure 2


gA <- ggplotGrob(pcplot1)
gB <- ggplotGrob(pcplot2)
grid::grid.newpage()
grid::grid.draw(rbind(gA, gB))



```

# Functional dispersion

```{r}
#need a species by trait matrix, but I want to use the population means
#make species name the name + site

site.pop <- select(cov, 1, 2, 31) %>% left_join(long.pres, ., by = 'uniID')

#count uniID per site and month
counts <- site.pop %>% group_by(Site.x, month, uniID) %>% count()
counts <- counts %>% group_by(Site.x, month) %>% count()

site.pop <- site.pop %>% group_by(Site.x, month, species) %>% summarize(total = sum(count.bin)) 

site.pop <- left_join(site.pop, counts, by = c("Site.x", "month"))

#dividing by the number of pitfalls because it differs (some were disturbed)
site.pop <- mutate(site.pop, pit.abun = total/n)
site.pop <- select(site.pop, 1:3, 6)
site.pop$site.name <- paste(site.pop$Site.x, site.pop$month)
site.pop$spepop <- paste(site.pop$species, site.pop$Site.x)
site.pop <- site.pop %>% ungroup() %>% select(4:6)

wide.pop <- pivot_wider(site.pop, names_from = spepop, values_from = pit.abun)
wide.pop[is.na(wide.pop)] <- 0
sites <- wide.pop$site.name

#there are no trait measurements for species that are absent from a site
wide.pop <- ungroup(wide.pop) %>% select(-site.name)
wide.pop <- wide.pop[which(colSums(wide.pop) !=0)]
wide.pop <- cbind(sites, wide.pop)
row.names(wide.pop) <- wide.pop$sites
wide.pop <- select(wide.pop, -sites)

#remove the two solenopsis singletons - no trait measuremnts

wide.pop <- select(wide.pop, -36, -42)

#check to ensure names are matched correctly between dataframes
spec <- colnames(wide.pop)

trait.pop <- as.data.frame(trait.pop)
row.names(trait.pop) <- trait.pop$spepop
trait.pop <- select(trait.pop, -spepop)

all.equal(spec, row.names(trait.pop))

```

## Null model/SES calculation

```{r, echo=FALSE}

#Lets create a matrix to store results from each iteration (one column per iteration)

#saving the randomization as an R object to cut down knit time
# numberReps <- 100
# resultsRandom <- matrix(NA, nrow = nrow(wide.pop), ncol = numberReps,
#                         dimnames = list(rownames(wide.pop),
#                                         paste0("Sim.", 1:numberReps)))
# for(rep in 1:numberReps){
#   randomizedFDis <- randomizeMatrix(samp = wide.pop, null.model = "independentswap")
#   simFDis <- dbFD(trait.pop, randomizedFDis, w.abun = TRUE)$FDis
#   resultsRandom[, rep] <- simFDis
# }


#saveRDS(resultsRandom, file = "Clean Data/objects/FDispRandom_sites.rds")


```

```{r}
resultsRandom <- readRDS("Clean Data/objects/FDispRandom_sites.rds")

obsFDis <- dbFD(trait.pop, wide.pop, w.abun = TRUE)$FDis
meanNull3 <- rowMeans(resultsRandom)
ES3 <- obsFDis - meanNull3
sdNull3 <- apply(resultsRandom, 1, sd)
SES3 <- ES3 / sdNull3
SES_dis <- data.frame(SES3)
SES_dis$sites <- row.names(SES_dis)

#make random values negative
resultsRandom_neg <- resultsRandom * -1
diff <- sweep(resultsRandom_neg, 1, obsFDis, "+")
diff_ses <- sweep(diff, 1, meanNull3, "/")
diff_ses_ag <- apply(diff_ses, 1, multiple.func)
diff_ses_ag <- t(diff_ses_ag)
diff_ses_ag <- cbind(diff_ses_ag, SES_dis$sites)

#get rid of last row
diff_ses_ag <- head(diff_ses_ag, 27)

test <- cbind(sdNull3, diff_ses_ag)
test <- as.data.frame(test)
test$sd <- as.numeric(test$sd)
test <- rename(test, sdrand = sdNull3)
test$sdrand <- as.numeric(test$sdrand)

cor.test(test$sd, test$sdrand)


#join site-level environmental measurements to data

cov$sites <- paste(cov$Site, cov$month)
SES <- select(cov, 1:15, shrub.site, sites, 37:43) %>% distinct() %>% left_join(SES_dis, by = "sites")

```

## Functional dispersion and PC gradient

```{r}

SES2 <- cbind(SES, sitescores)
SES2$PC1 <- as.numeric(SES2$PC1)
SES2$PC2 <- as.numeric(SES2$PC2)


#need to add raw FDisp score


mean(SES$SES3)
t.test(SES$SES3)
library(glmmTMB)

m1 <- glmmTMB(SES3 ~  PC1 + PC2 + (1|Site), data = SES2)
summary(m1)
performance(m1)


m2 <- glmmTMB(SES3 ~  PC1 + PC2, data = SES2)
summary(m2)
performance(m1)

AIC(m1, m2)
fit1 <- lm(SES3 ~  PC1, data = SES2)
summary(fit1)

ggplot(SES2, aes(PC1, SES3)) + geom_point() + stat_smooth(method = "lm") + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black")) + ylab("SES Functional dispersion")+  geom_label(aes(x = 0.75, y = 2),vjust=1, hjust = 0, 
             label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 3),
 " \nP =",signif(summary(fit1)$coef[2,4], 3))) + geom_hline(yintercept = 0, linetype = "dashed") 


SES2 <- mutate(SES2, shrub = ifelse(shrub.site == "atriplex", "shrub", (ifelse(shrub.site == "ephedra", "shrub", "open"))))

m <- glmmTMB(SES3 ~shrub + (1|Site), data = SES2)
summary(m)

SES2 %>% group_by(shrub) %>% summarize(mean = mean(SES3), sd = sd(SES3))



```

# Taxonomic diversity

## Species richness \~ PC1

```{r}

#use long pres
#join month by identifier
#remove the two singletons?

alpha <- select(cov, uniID, month) %>% right_join(long.pres, by = "uniID")
alpha$sites <- paste(alpha$Site, alpha$month)
alpha <- filter(alpha, species != "Solenopsisaurea" & species != "Solenopsismolesta")
alpha <- select(alpha, sites, species, count.bin)
alpha <- distinct(alpha)
alpha <- alpha %>% group_by(sites) %>% summarise(richness = sum(count.bin))

alpha <- right_join(alpha, SES2, by = "sites")

#same GLM or GLMM
m1 <- glmmTMB(richness ~ PC1 + PC2 +  (1|Site), family = "poisson", data = alpha)
summary(m1)
check_overdispersion(m1)
performance(m1)

m2 <- glmmTMB(richness ~ PC1 + PC2, family = "poisson", data = alpha)
summary(m2)



AIC(m1, m2)
m3 <- glm(richness ~ month, family = "poisson", data = alpha)
summary(m3)
car::Anova(m3)
tb <- table(alpha$richness, alpha$sites)
chisq.test(alpha$richness, alpha$Site)
```

## Accumulation curves

```{r}

spec <-wide
sitespec <- left_join(wide, cov, by = "uniID")
sitespec <- select(sitespec, 2:14, 17)
#par(mfrow=c(5,2))


all <- select(sitespec, -Site)
#xi <- specaccum(all,  method = "rarefaction", permutations = 100)
xs <- specaccum(all,  method = "random", permutations = 1000)
#plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", ci.type = "line", cex.lab = 1.5)
title("All Sites Pooled", adj = 0)

av <- filter(sitespec, Site == "Aven") %>% select(-Site)
# xi <- specaccum(av,  method = "rarefaction", permutations = 100)
xs <- specaccum(av,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Avenal", adj = 0)

cas <- filter(sitespec, Site == "CaS") %>% select(-Site)
# xi <- specaccum(cas,  method = "rarefaction", permutations = 100)
xs <- specaccum(cas,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Carrizo - Shrubs", adj = 0)

casl <- filter(sitespec, Site == "CaSl") %>% select(-Site)
# xi <- specaccum(casl,  method = "rarefaction", permutations = 100)
xs <- specaccum(casl,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Carrizo - Shrubless", adj = 0)

coal <- filter(sitespec, Site == "Coal") %>% select(-Site)
# xi <- specaccum(coal,  method = "rarefaction", permutations = 100)
xs <- specaccum(coal,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Coalinga", adj = 0)

lok <- filter(sitespec, Site == "Lok") %>% select(-Site)
# xi <- specaccum(lok,  method = "rarefaction", permutations = 100)
xs <- specaccum(lok,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Lokern", adj = 0)

mov <- filter(sitespec, Site == "Mov") %>% select(-Site)
# xi <- specaccum(mov,  method = "rarefaction", permutations = 100)
xs <- specaccum(mov,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Mountainview Rd", adj = 0)

papl <- filter(sitespec, Site == "PaPl") %>% select(-Site)
# xi <- specaccum(papl,  method = "rarefaction", permutations = 100)
xs <- specaccum(papl,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Panoche Hills", adj = 0)

semit <- filter(sitespec, Site == "SemiT") %>% select(-Site)
# xi <- specaccum(semit,  method = "rarefaction", permutations = 100)
xs <- specaccum(semit,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Semitropic", adj = 0)

sicr <- filter(sitespec, Site == "SiCr") %>% select(-Site)
# xi <- specaccum(sicr,  method = "rarefaction", permutations = 100)
xs <- specaccum(sicr,  method = "random", permutations = 1000)
# plot(xi, xlab = "Number of Individuals", ylab = "Species Richness")
plot(xs, xlab = "Number of Pitfall Samples", ylab = "Species Richness", cex.lab = 1.5)
title("Silver Creek Ranch", adj = 0)


```

## Taxonomic beta diversity

```{r}

#functional indices are weighted so use abundance weighted beta-diversity


library(betapart)
# baselgi methods for beta-diversity

#we can use the occupancy population dateframe
#drop half of species name after space
#filter out two singletons


sites_species <- site.pop
sites_species <- separate(sites_species, spepop, into = c("species", "month"), sep = " ")
sites_species <- filter(sites_species, species != "Solenopsisaurea" & species != "Solenopsismolesta")
sites_species <- select(sites_species, -month)
# need wide


sites_species <- pivot_wider(sites_species, names_from = "species", values_from = "pit.abun") %>% as.data.frame()
row.names(sites_species) <- sites_species$site.name
sites_species <- select(sites_species, -site.name)

#balanced variation in abundance is turnover
#abundance gradients are nestedness

beta.core <- betapart.core.abund(sites_species)
betapair <- beta.pair.abund(beta.core)

betamulti <- beta.multi.abund(beta.core)

#turnover component
betamulti$beta.BRAY.BAL

#nestedness component
betamulti$beta.BRAY.GRA

#combined
betamulti$beta.BRAY


#mostly turnover, some nestedness

#betapair are dist objects

tdis <- betapair$beta.bray.bal
ndis <- betapair$beta.bray.gra
bdis <- betapair$beta.bray
#let's use the standardized environmental variables from the pca scores

envbeta <- cbind(env.reduce, env2_sitelabels)

#sort envbeta to same order as site_species
envbeta <- envbeta[order(match(envbeta[,10], row.names(sites_species))),]
row.names(envbeta) <- envbeta$env2_sitelabels
envbeta <- select(envbeta, -env2_sitelabels)

env_dist <- dist(envbeta, "euclidean")


mantel(tdis, env_dist)
mantel(ndis, env_dist)
mantel(bdis, env_dist)
mean(bdis)
sd(bdis)
#turnover NOT related to env gradient
#nestedness - this is changes to abundance is related

```

## Phylogenetic signal

```{r}
#install.packages("phytools")
#install.packages("picante")
library(picante)
library(phytools)
library(tidyr)
genusv <- c("Cyphomyrmex", "Dorymyrmex", "Forelius", "Messor", "Myrmecocystus", "Pheidole", "Pogonomyrmex", "Solenopsis", "Temnothorax")

#import nexus tree
tree <- read.nexus("moreau/moreaubeast.nex")
str(tree)
plot(tree)
tree
labels <- tree[["tip.label"]]
labels <- as.data.frame(labels)
full <- labels$labels
labels <- separate_wider_delim(labels, cols = 1, delim ="_", names = c("genus", "sp", "csm"), too_few = "align_start", too_many = "merge")
labels <- cbind(full, labels)
labels <- subset(labels, genus %in% genusv)
keep <- labels$full
df <- data.frame(matrix(ncol = 19, nrow = 1))
colnames(df) <- keep
df[is.na(df)] <- 1
df <- dplyr::select(df, 1, 4, 6, 8, 11, 12, 13, 16, 17, 18, 19)
pruned <- prune.sample(df, tree)
pruned
pruned[["tip.label"]] <- c("Temnothoraxandrei", "Pheidolehyatti", "Cyphomyrmexwheeleri", "Solenopsisxyloni", "Messorandrei", "Messorpergandei", "Pogonomyrmexcalifornicus", "Myrmecocystus", "Dorymyrmexbicolor", "Dorymyrmexinsanus", "Foreliuspruinosis") 
plot(pruned)

labelorder <- c("Temnothoraxandrei", "Pheidolehyatti", "Cyphomyrmexwheeleri", "Solenopsisxyloni", "Messorandrei", "Messorpergandei", "Pogonomyrmexcalifornicus", "Myrmecocystus", "Dorymyrmexbicolor", "Dorymyrmexinsanus", "Foreliuspruinosis") 
plot(pruned)
# 

#get species level trait values

traits.sp1 <- traits.sp %>%
  select(.,-sd) %>%
  pivot_wider(names_from = Trait, values_from = mean) %>%
  as.data.frame(traits.sp)

traits.sp1 <- select(traits.sp1, 1, 3, 5, 8, 9, 11, 13, 14)
traits.sp1$X.1 <- gsub(" ", ".", traits.sp1$X.1)


traitphy <- traits.sp1
row.names(traitphy) <- traitphy$X.1
traitphy <- select(traitphy, -X.1)

names <- sort(c("Temnothoraxandrei", "Pheidolehyatti", "Cyphomyrmexwheeleri", "Solenopsisxyloni", "Messorandrei", "Messorpergandei", "Pogonomyrmexcalifornicus", "Myrmecocystus", "Dorymyrmexbicolor", "Dorymyrmexinsanus", "Foreliuspruinosis") )

row.names(traitphy) <- names


traitphy <- traitphy[match(labelorder, row.names(traitphy)),]


row.names(traitphy)
pruned[["tip.label"]]

par(mfrow=c(2,2))
for (i in names(traitphy)) {
plot(pruned, show.tip.label=FALSE, main=i)
tiplabels(pch=22, col=traitphy[,i]+1, bg=traitphy[,i]+1, cex=1.5)
}

multiPhylosignal(traitphy, pruned)

ps <- multiPhylosignal(traitphy, pruned)
write.csv(ps, "Clean Data/phylo.csv")
ps



library(adephylo)

library(phylosignal)
library(phylobase)
p4d <- phylo4d(pruned, traitphy)
barplot.phylo4d(p4d, tree.type = "phylo", tree.ladderize = TRUE)
phyloSignal(p4d = p4d, method = "all")

is.ultrametric(pruned)


sespd <- ses.pd(sites_species, pruned, null.model = "independentswap")
pdist <- cophenetic.phylo(pruned)
ses.mpd.result <- ses.mpd(sites_species, pdist, null.model="independentswap", abundance.weighted=TRUE, runs=99)
ses.mpd.result$sites <- row.names(ses.mpd.result)

test <- left_join(SES2, ses.mpd.result, by = "sites")

m1 <- glmmTMB(SES3 ~ mpd.obs.z + PC1 + PC2 +(1|Site), data = test)
summary(m1)
performance(m1)

m1 <- glmmTMB(mpd.obs.z ~ SES3 + PC1 + PC2 + (1|Site), data = test)
summary(m1)
performance(m1)

cor.test(test$mpd.obs.z, test$PC1)

t.test(test$mpd.obs.z)

ggplot(test, aes(SES3, mpd.obs.z)) + geom_smooth(method = "lm")

ggplot(test, aes(PC1, mpd.obs.z)) + geom_smooth(method = "lm")

ggplot(test, aes(PC1, SES3)) + geom_smooth(method = "lm")


Test.Kmult<-function(x,phy,iter=999){
library(ape)
Kmult<-function(x,phy){
  x<-as.matrix(x)
  N<-length(phy$tip.label)
  ones<-array(1,N)
  C<-vcv.phylo(phy)
  C<-C[row.names(x),row.names(x)]
  a.obs<-colSums(solve(C))%*%x/sum(solve(C))
#evol.vcv code
  distmat<-as.matrix(dist(rbind(as.matrix(x),a.obs)))
  MSEobs.d <- sum(distmat[(1:N),(N+1)]^2)
  
  #sum distances root vs. tips
  eigC <- eigen(C)
  D.mat<-solve(eigC$vectors
  %*% diag(sqrt(eigC$values))
  %*% t(eigC$vectors))
  dist.adj<-as.matrix(dist(rbind((D.mat
  %*%(x-(ones%*%a.obs))),0)))
  MSE.d<-sum(dist.adj[(1:N),(N+1)]^2)
  #sum distances for transformed data)
  K.denom<-(sum(diag(C))-
  N*solve(t(ones)%*%solve(C)%*%ones)) / (N-1)
  K.stat<-(MSEobs.d/MSE.d)/K.denom
  return(K.stat)
}
K.obs<-Kmult(x,phy)
P.val <- 1
K.val <- rep(0, iter)
for (i in 1:iter){
x.r<-as.matrix(x[sample(nrow(x)),])
rownames(x.r)<-rownames(x)
K.rand<-Kmult(x.r,phy)
P.val<-ifelse(K.rand>=K.obs, P.val+1,P.val)
K.val[i] <- K.rand
}
P.val <- P.val/(iter + 1)
K.val[iter + 1] = K.obs
hist(K.val, 30, freq = TRUE, col = "gray",
xlab = "Phylogenetic Signal")
arrows(K.obs, 50, K.obs, 5, length = 0.1, lwd = 2)
return(list(phy.signal = K.obs, pvalue = P.val))
}

traitphystand <- decostand(traitphy, method = "standardize")
Test.Kmult(traitphystand, pruned)
```

## Phylo and functional plots together

```{r}


test2 <- pivot_longer(test, cols = c("SES3", "mpd.obs.z"), names_to = "type", values_to = "value")


test2$type <- factor(test2$type, levels = c("SES3", "mpd.obs.z"))

a <- ggplot(test2, aes(PC1, value, color = type)) + geom_point(aes(color = type)) + stat_smooth(data = filter(test2, type == "SES3"), method = "lm") + stat_smooth(data = filter(test2, type == "mpd.obs.z"), method = "lm", linetype = "dashed", se = FALSE) + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black")) + ylab("Standardized Effect Size Dispersion") + geom_hline(yintercept = 0, linetype = "dashed") + scale_color_manual(values = c( "#DF7861", "#94B49F"), labels = c("Functional", "Phylogenetic")) + theme(legend.position= c(0.8, 0.9)) + theme(legend.title=element_blank()) + theme(text = element_text(size = 13))
  
a

b <- ggplot(test, aes(mpd.obs.z, SES3)) + stat_smooth(method = "lm", color = "black") + geom_point() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black")) + xlab("Phylogenetic Dispersion (SES MPD)") + ylab("Functional Dispersion (SES FDisp)") + theme(text = element_text(size = 13))




plots <- list(a,b)
grobs <- list()
widths <- list()

for (i in 1:length(plots)){
    grobs[[i]] <- ggplotGrob(plots[[i]])
    widths[[i]] <- grobs[[i]]$widths[2:5]
}

maxwidth <- do.call(grid::unit.pmax, widths)
for (i in 1:length(grobs)){
     grobs[[i]]$widths[2:5] <- as.list(maxwidth)
}

p <- do.call("grid.arrange", c(grobs, ncol = 2))
p


geom_label(aes(x = 0.75, y = 2),vjust=1, hjust = 0, 
             label = paste("Adj r2 = ",signif(summary(fit1)$adj.r.squared, 3),
 " \nP =",signif(summary(fit1)$coef[2,4], 3)))
```

## Variance partitioning

```{r}
library(adespatial)
library(SoDA)

#convert our degrees in lat long to cartesian


sites.xy <- geoXY(SES2$Lat.x, SES2$Long.x)
mem <- dbmem(sites.xy)



disp <- SES2$SES3

env <- select(SES2, 4, 5, 8, 12:14, 18, 19, 24)
env <- decostand(env, method = "standardize")
pses <- test$mpd.obs.z
v1 <- varpart(Y =disp, X = env, mem, pses)
summary(v1)

plot(v1, Xnames = NA)
text(0.1, 1, labels = "Environment")


v1
fract <- v1$part$fract
ind <- v1$part$indfract

```

#CWM-environment \## CWM \~ PC1

```{r}

site_cwm <- dbFD(trait.pop, wide.pop, w.abun = TRUE)$CWM
cwm <- site_cwm
cwm$sites <- row.names(cwm)  
  

cwm <- select(SES2, Site, sites, PC1, PC2) %>% left_join(cwm, by = 'sites')

```

```{r}



fit2 <- glmmTMB(Webers ~ PC1 + (1|Site), cwm)
summary(fit2)
model_performance(fit2)
t <- model_performance(fit2)

a <- ggplot(fit2$frame, aes_string(x = names(fit2$frame)[2], y = names(fit2$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "blue") + geom_label(aes(x = 0.75, y = 1.4),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM Weber's \nBody Length (mm)") + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 19))
a



fit1 <- glmmTMB(Femur.w ~ PC1 + (1|Site), cwm)
summary(fit1)
t <- model_performance(fit1)

b <-  ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "blue") +
  geom_label(aes(x = 0.7, y = 1.1),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nFemur Length (mm)") + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 19))
b


fit1 <- glmmTMB(Headl.w ~ PC1+ (1|Site), cwm)
summary(fit1)
t <- model_performance(fit1)

c <- ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.65, y = 0.86),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nHead Length (mm)") + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 19))
c


fit1 <- glmmTMB(Eyel.w ~ PC1 + (1|Site), cwm)
summary(fit1)
t <- model_performance(fit1)

d <-  ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.65, y = 0.2),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nEye Length (mm)") + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 19))
d


fit1 <- glmmTMB(Headw.w ~ PC1 + (1|Site), cwm)
summary(fit1)
t <- model_performance(fit1)

e <- ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.65, y = 0.8),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + xlab("") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + ylab("CWM \nHead Width (mm)")+ xlab("PC1") + theme(text = element_text(size = 19))
e


fit1 <- glmmTMB(Scape.w ~ PC1 + (1|Site), cwm)
summary(fit1)
t <- model_performance(fit1)

f <-  ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.7, y = 0.85),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nScape Length (mm)") + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm")) + theme(text = element_text(size = 19))
f

fit1 <- glmmTMB(Mandible.w ~ PC1+ (1|Site), cwm)
summary(fit1)
t <- model_performance(fit1)
g <- ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.65, y = 0.5),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nMandible Length (mm)") + xlab("PC1") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))+ theme(text = element_text(size = 19))
g


```

```{r}
plots <- list(a,b,c,d,e,f,g)
grobs <- list()
widths <- list()

for (i in 1:length(plots)){
    grobs[[i]] <- ggplotGrob(plots[[i]])
    widths[[i]] <- grobs[[i]]$widths[2:5]
}

maxwidth <- do.call(grid::unit.pmax, widths)
for (i in 1:length(grobs)){
     grobs[[i]]$widths[2:5] <- as.list(maxwidth)
}

p <- do.call("grid.arrange", c(grobs, ncol = 2))
p

```

## CWM \~ PC2

```{r}

fit1 <- glmmTMB(Webers ~ PC2 + (1|Site), cwm)
summary(fit1)
performance(fit1)
t <- model_performance(fit1)




a <- ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.75, y = 1.3),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM Weber's \nBody Length (mm)") + xlab("PC2") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,2,0,0), "mm")) + theme(text = element_text(size = 19))
a



fit1 <- glmmTMB(Femur.w ~ PC2 + (1|Site), cwm)
summary(fit1)
performance(fit1)
t <- model_performance(fit1)
b <-  ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "blue") +
  geom_label(aes(x = 0.65, y = 1.1),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nFemur Length (mm)") + xlab("PC2") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,2,0,0), "mm"))+ theme(text = element_text(size = 19))
b


fit1 <- glmmTMB(Headl.w ~ PC2 + (1|Site), cwm)
summary(fit1)
performance(fit1)
t <- model_performance(fit1)
c <- ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "blue") +
  geom_label(aes(x = 0.65, y = 0.9),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5)  + ylab("CWM \nHead Length (mm)") + xlab("PC2") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,2,0,0), "mm"))+ theme(text = element_text(size = 19))
c


fit1 <- glmmTMB(Eyel.w ~ PC2 + (1|Site), cwm)
summary(fit1)
performance(fit1)
t <- model_performance(fit1)
d <-  ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.65, y = 0.2),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nEye Length (mm)") + xlab("PC2") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,2,0,0), "mm"))+ theme(text = element_text(size = 19))
d


fit1 <- glmmTMB(Headw.w ~ PC2 + (1|Site), cwm)
summary(fit1)
performance(fit1)
t <- model_performance(fit1)
e <- ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed", se = FALSE) +
  geom_label(aes(x = 0.75, y = 0.8),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + xlab("PC2") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,2,0,0), "mm")) + ylab("CWM \nHead Width (mm)")+ theme(text = element_text(size = 19))
e


fit1 <- glmmTMB(Scape.w ~ PC2 + (1|Site), cwm)
summary(fit1)
performance(fit1)
t <- model_performance(fit1)
f <-  ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "blue") +
  geom_label(aes(x = 0.75, y = 0.85),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nScape Length (mm)") + xlab("PC2") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,2,0,0), "mm")) + theme(text = element_text(size = 19))
f

fit1 <- glmmTMB(Mandible.w ~ PC2  + (1|Site), cwm)
summary(fit1)
performance(fit1)


g <- ggplot(fit1$frame, aes_string(x = names(fit1$frame)[2], y = names(fit1$frame)[1])) + 
  geom_point() +
  stat_smooth(method = "lm", col = "#3C4142", linetype = "dashed") +
  geom_label(aes(x = 0.75, y = 0.5),vjust=1, hjust = 0, 
             label = paste("Marginal \nr2 = ",signif(t$R2_marginal, 2)), size = 5) + ylab("CWM \nMandible Length (mm)") + xlab("PC2") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(plot.margin=grid::unit(c(0,1,0,0), "mm"))+ theme(text = element_text(size = 19))
g

```

```{r}

plots <- list(a,b,c,d,e,f,g)
grobs <- list()
widths <- list()

for (i in 1:length(plots)){
    grobs[[i]] <- ggplotGrob(plots[[i]])
    widths[[i]] <- grobs[[i]]$widths[2:5]
}

maxwidth <- do.call(grid::unit.pmax, widths)
for (i in 1:length(grobs)){
     grobs[[i]]$widths[2:5] <- as.list(maxwidth)
}

p <- do.call("grid.arrange", c(grobs, ncol = 2))
p

```

# ITV

Intraspecific trait variation

## Body size

```{r}

itv <- data.frame()

#body size
webers <- traits %>% filter(Trait == "Webers")
partition <- aov(Measure~X.1, data = webers)
summary(partition)



#ITV is a low component of overall variability

logWebers <- log(webers$Measure)
modPart <- lme(logWebers ~ 1, random = ~ 1 | Site / X.1, data = webers, na.action = na.omit)
varcompWeber <- ape::varcomp(modPart, scale = 1)
varcompWeber

#body size differences between individuals of the same species within a site account for 9.2% variation
#differences among species within a site account for 90.7%
#differences among species between sites accounts for 0 %
```

## Femur length

```{r}
# relative leg length
femur <- traits %>% filter(Trait == "Femur.w")
partition <- aov(Measure~X.1, data = femur)
summary(partition)

#ITV is 1.208/3.298 = 36.6% of variation

logFemur <- log(femur$Measure)
modPart <- lme(logFemur ~ 1, random = ~ 1 | Site / X.1, data = femur, na.action = na.omit)
varcompFemur <- ape::varcomp(modPart, scale = 1)
varcompFemur

#relative femur length differences between individuals of the same species within a site account for 31% variation
#differences among species within a site account for 66.7%
#differences among species between sites accounts for 2.4 %
```

## Scape length

```{r}
#scape length

scape <- traits %>% filter(Trait == "Scape.w")
partition <- aov(Measure~X.1, data = scape)
summary(partition)

#ITV is 0.706/4.632 = 15.2 % of variation

logScape <- log(scape$Measure)
modPart <- lme(logScape ~ 1, random = ~ 1 | Site / X.1, data = scape, na.action = na.omit)
varcompScape <- ape::varcomp(modPart, scale = 1)
varcompScape

#relative scape length differences between individuals of the same species within a site account for 15% variation
#differences among species within a site account for 84.5%
#differences among species between sites accounts for 0%
```

## Mandible length

```{r}
#mandible length

mandible <- traits %>% filter(Trait == "Mandible.w")
partition <- aov(Measure~X.1, data = mandible)
summary(partition)

#ITV is 0.3478/0.76 = 45.7 % of variation

logMandible <- log(mandible$Measure)
modPart <- lme(logMandible ~ 1, random = ~ 1 | Site / X.1, data = mandible, na.action = na.omit)
varcompMandible <- ape::varcomp(modPart, scale = 1)
varcompMandible

#relative mandible length differences between individuals of the same species within a site account for 36.6% variation
#differences among species within a site account for 63%
#differences among species between sites accounts for 0%
```

## Eye length

```{r}

#eye length

el <- traits %>% filter(Trait == "Eyel.w")
partition <- aov(Measure~X.1, data = el)
summary(partition)

#ITV is 0.06/0.31 = 21 % of variation

logEL <- log(el$Measure)
modPart <- lme(logEL ~ 1, random = ~ 1 | Site / X.1, data = el, na.action = na.omit)
varcompEL <- ape::varcomp(modPart, scale = 1)
varcompEL

#relative eye length differences between individuals of the same species within a site account for 24% variation
#differences among species within a site account for 75.9%
#differences among species between sites accounts for 0%
```

## Head width

```{r}
#head width

hw <- traits %>% filter(Trait == "Headw.w")
partition <- aov(Measure~X.1, data = hw)
summary(partition)

#ITV is 26%
0.49/(0.49+1.39)

logHW <- log(hw$Measure)
modPart <- lme(logHW ~ 1, random = ~ 1 | Site / X.1, data = hw, na.action = na.omit)
varcompHW <- ape::varcomp(modPart, scale = 1)
varcompHW

#relative head width differences between individuals of the same species within a site account for 21.8% variation
#differences among species within a site account for 78.1%
#differences among species between sites accounts for 0%


hl <- traits %>% filter(Trait == "Headl.w")
partition <- aov(Measure~X.1, data = hl)
summary(partition)
```

## ITV Plots

```{r}

itv <- read.csv("raw data/itv.csv")
itv <- itv %>% mutate(total = Species + ITV) %>% mutate(sp.rel = Species/total, itv.rel = ITV/total)

itv = pivot_longer(itv, 5:6, names_to = "rel.itv", values_to = "val")
itv$Trait <- gsub("Weber", "Weber's \nBody Length", itv$Trait)
itv$Trait <- gsub("Femur", "Femur Length", itv$Trait)
itv$Trait <- gsub("Mandible", "Mandible\n Length", itv$Trait)
itv$Trait <- gsub("Scape", "Scape Length", itv$Trait)
itv$Trait <- factor(itv$Trait, levels = unique(itv$Trait[order(itv$val)]))
itv$rel.itv <- factor(itv$rel.itv, levels = c("sp.rel", "itv.rel"))
itv %>% group_by(rel.itv) %>% summarize(mean = mean(val), sd = sd(val))

ggplot(itv, aes(Trait, val, fill = rel.itv)) +geom_bar(position="stack", stat = "identity", aes(fill = rel.itv)) + ylab("Proportion of trait variation explained") + scale_fill_manual(values = c("gray", "black"), labels = c("Interspecific", "Intraspecific")) + theme(axis.text=element_text(size=12),
        axis.title=element_text(size=14,face="bold")) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(legend.position="top", legend.title = element_blank(), legend.text=element_text(size=12))


```
