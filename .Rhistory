unique(plt_wide$Year.NA)
unique(plt_wide$Rep.NA)
unique(plt_wide$Site)
unique(plt_wide$Microsite)
plt_wide$uniID <- paste(plt_wide$Site, plt_wide$Year.NA, plt_wide$Microsite, plt_wide$Rep.NA)
plt_wide$uniID <- gsub(" ", "", plt_wide$uniID)
View(plt_wide)
plt_wide[is.null(plt_wide)] <- 0
View(plt_wide)
plt_wide[is.NULL(plt_wide)] <- 0
plt_wide[plt_wide=='NULL'] <- 0
plts <- read.csv("Raw Data/annuals/allplants_IDed.csv")
plts <- select(plts, -X)
plts <- select(plts, -6)
str(plts)
View(plt_wide)
plts <- read.csv("Raw Data/annuals/allplants_IDed.csv")
plts <- select(plts, -X)
plts <- select(plts, -6)
str(plts)
View(plts)
test <- distinct(plts)
plt_wide <- test %>% pivot_wider(names_from = species, values_from = abun)
View(plt_wide)
test <- distinct(plts)
plt_wide <- test %>% pivot_wider(names_from = species, values_from = abun)
test %>%
dplyr::group_by(Year.NA, Rep.NA, Site, Date, Microsite, species) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
dplyr::filter(n > 1L)
dup <-test %>%
dplyr::group_by(Year.NA, Rep.NA, Site, Date, Microsite, species) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
dplyr::filter(n > 1L)
View(dup)
plts <- read.csv("Raw Data/annuals/allplants_IDed.csv")
plts <- select(plts, -X)
plts <- select(plts, -6)
str(plts)
unique(plt_wide$Year.NA)
unique(plt_wide$Rep.NA)
unique(plt_wide$Site)
unique(plt_wide$Microsite)
plt_wide$uniID <- paste(plt_wide$Site, plt_wide$Year.NA, plt_wide$Microsite, plt_wide$Rep.NA)
plt_wide$uniID <- gsub(" ", "", plt_wide$uniID)
View(plt_wide)
plt_wide <- plts %>% pivot_wider(names_from = species, values_from = abun)
test <- distinct(plts)
dup <-plts %>%
dplyr::group_by(Year.NA, Rep.NA, Site, Date, Microsite, species) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
dplyr::filter(n > 1L)
View(dup)
plts <- read.csv("Raw Data/annuals/allplants_IDed.csv")
plts <- select(plts, -X)
plts <- select(plts, -6)
str(plts)
plt_wide <- plts %>% pivot_wider(names_from = species, values_from = abun)
unique(plt_wide$Year.NA)
unique(plt_wide$Rep.NA)
unique(plt_wide$Site)
unique(plt_wide$Microsite)
plt_wide$uniID <- paste(plt_wide$Site, plt_wide$Year.NA, plt_wide$Microsite, plt_wide$Rep.NA)
plt_wide$uniID <- gsub(" ", "", plt_wide$uniID)
plt_wide[is.na(plt_wide)] <- 0
env <- select(plt_wide, 1:5, uniID)
comm <- select(plt_wide, 6:91)
library(vegan)
richness <- specnumber(comm)
abun <- rowSums(comm)
env$rich <- richness
env$abun <- abun
#import plant metadata for zero rows
reps <- read.csv("Raw Data/reps.csv")
View(reps)
reps <- filter(reps, season == "spring")
reps$uniID <- paste(reps$Site, reps$year, reps$Microsite, reps$Rep)
plt.ag <- left_join(reps, env, by = "uniID")
View(plt.ag)
reps$uniID <- gsub(" ", "", reps$uniID)
plt.ag <- left_join(reps, env, by = "uniID")
View(plt.ag)
plt.ag$rich[is.na(plt.ag$rich)] <- 0
plt.ag$abun[is.na(plt.ag$abun)] <- 0
ggplot(plt.ag, aes(Microsite, abun)) + geom_boxplot()
ggplot(plt.ag, aes(Microsite.x, abun)) + geom_boxplot()
ggplot(plt.ag, aes(Microsite.x, abun, fill = Site.x)) + geom_boxplot()
ggplot(plt.ag, aes(Site.x, abun, fill = Microsite.x)) + geom_boxplot()
ggplot(plt.ag, aes(Site.x, rich, fill = Microsite.x)) + geom_boxplot()
ggplot(plt.ag, aes(Site.x, rich, fill = Microsite.x, color = Year.x)) + geom_boxplot()
ggplot(plt.ag, aes(Site.x, rich, fill = Microsite.x, color = year)) + geom_boxplot()
ggplot(plt.ag, aes(Site.x, rich, fill = Microsite.x, color = as.factor(year))) + geom_boxplot()
arth2 <- read.csv("Raw Data/pitfall_arth.csv")
ants <- dplyr::filter(arth2, Family == "Formicidae")
View(ants)
bar <- filter(ants, site == "barstow")
bar <- filter(ants, site == "Barstow")
library(dplyr)
library(ggplot2)
library(tidyr)
bar <- filter(ants, site == "Barstow")
View(bar)
library(dplyr)
library(ggplot2)
library(tidyr)
library(glmmTMB)
m1 <- glmmTMB(abun ~ Microsite.x + (1|Site), family = "poisson", data = plt.ag)
m1 <- glmmTMB(abun ~ Microsite.x + (1|site), family = "poisson", data = plt.ag)
m1 <- glmmTMB(abun ~ Microsite.x + (1|Site.x), family = "poisson", data = plt.ag)
summary(m1)
m1 <- glmmTMB(rich ~ Microsite.x + (1|Site.x), family = "poisson", data = plt.ag)
summary(m1)
m1 <- glmmTMB(rich ~ Microsite.x + Site.x, family = "poisson", data = plt.ag)
summary(m1)
m1 <- glmmTMB(rich ~ Microsite.x * Site.x, family = "poisson", data = plt.ag)
summary(m1)
emmeans(Microsite.x~Site.x, m1)
library(emmeans)
emmeans(m1, pairwise ~ Microsite.x*Site.x)
# Load required libraries
# devtools::install_github("jslefche/piecewiseSEM@devel") # version 2.3.0
library(piecewiseSEM)
install.packages("piecewiseSEM")
# Load required libraries
devtools::install_github("jslefche/piecewiseSEM@devel") # version 2.3.0
library(piecewiseSEM)
library(lavaan)
# Load Keeley data set
data(keeley)
force(keeley)
# Break down component regressions
abiotic_model <- lm(abiotic ~ distance, data = keeley)
hetero_model <- lm(hetero ~ distance, data = keeley)
richness_model <- lm(rich ~ abiotic + hetero, data = keeley)
# Use the `psem` function to create the SEM
model <- psem(abiotic_model, hetero_model, richness_model)
# Look at object
model
plot(model)
seed2023 <- read.csv("Raw Data/seedrates2023.csv")
#526 put out
seed2023 <- filter(seed2023, ending.weight != "disturbed")
seed2023 <- filter(seed2023, ending.weight != "broken")
seed2023 <- filter(seed2023, ending.weight != "was never put out")
seed2023 <- select(seed2023, 1:7)
seed2024 <- read.csv("Raw Data/seedsrates2024.csv")
seed2024 <- filter(seed2024, ending.weight != "disturbed")
seed2024 <- filter(seed2024, ending.weight != "not put out" & ending.weight != "never put out")
seed2024$Site <- gsub("yucca", "HOM", seed2024$Site)
seeds <- rbind(seed2023, seed2024)
seeds$ending.weight <- as.numeric(seeds$ending.weight)
unique(seeds$Size)
seeds$Size <- gsub(" ", "", seeds$Size)
seeds$Size <- gsub("medium", "med", seeds$Size)
seeds$Year <- as.factor(seeds$Year)
seedspring <- filter(seeds, Visit == "Spring")
seeds$Site <- gsub(" ", "", seeds$Site)
br <- read.csv("Raw Data/bromesites.csv")
seeds <- left_join(seeds, br, by = "Site")
ggplot(seeds, aes(Size, ending.weight)) + facet_grid(~ brome) + geom_boxplot() + ylab("Ending weight (g)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black"))
ggplot(seeds, aes(Microsite, ending.weight)) + geom_boxplot()
ggplot(seeds, aes(as.factor(Year), ending.weight, color = Visit)) + geom_boxplot()
ggplot(seeds, aes(Site, ending.weight, color = Visit)) + geom_boxplot()
library(glmmTMB)
library(emmeans)
m1 <- glmmTMB(ending.weight ~  Size *brome + (1|Year) + (1|Site), data = seeds)
summary(m1)
car::Anova(m1)
emmeans(m1, pairwise ~ Size*brome)
m1 <- glmmTMB(ending.weight ~ Microsite +Year  + Visit + Size * brome+ (1|Site), data = seeds)
summary(m1)
car::Anova(m1)
m1 <- glmmTMB(ending.weight ~ Microsite  + Size * brome+ (1|Site) + (1|Year), data = seedspring)
br <- read.csv("Raw Data/bromesites.csv")
seeds <- left_join(seeds, br, by = "Site")
ggplot(seeds, aes(Size, ending.weight)) + facet_grid(~ brome) + geom_boxplot() + ylab("Ending weight (g)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black"))
View(seeds)
ggplot(seeds, aes(Size, ending.weight)) + facet_grid(~ brome.x) + geom_boxplot() + ylab("Ending weight (g)") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1, fill = NA), axis.line = element_line(colour = "black"))
ggplot(seeds, aes(Microsite, ending.weight)) + geom_boxplot()
library(glmmTMB)
library(emmeans)
m1 <- glmmTMB(ending.weight ~  Size *brome + (1|Year) + (1|Site), data = seeds)
m1 <- glmmTMB(ending.weight ~  Size *brome.x + (1|Year) + (1|Site), data = seeds)
summary(m1)
m1 <- glmmTMB(ending.weight ~  Size *brome.x  + (1|Site), data = seeds)
summary(m1)
car::Anova(m1)
emmeans(m1, pairwise ~ Size*brome)
emmeans(m1, pairwise ~ Size*brome.x)
emmeans(m1, pairwise ~ brome.x)
emmeans(m1, pairwise ~ Size)
emmeans(m1, pairwise ~ Size|brome.x)
m1 <- glmmTMB(ending.weight ~ Microsite +Year  + Visit + Size * brome+ (1|Site), data = seeds)
m1 <- glmmTMB(ending.weight ~ Microsite +Year  + Visit + Size * brome.x+ (1|Site), data = seeds)
summary(m1)
car::Anova(m1)
library(dplyr)
library(ggplot2)
library(tidyr)
arth2 <- read.csv("Raw Data/pitfall_arth.csv")
ants <- dplyr::filter(arth2, Family == "Formicidae")
sum(ants$count)
hom <- filter(ants, site == "HOM")
View(hom)
library(dplyr)
library(ggplot2)
library(tidyr)
sites <- read.csv("Raw Data/sites.csv")
librar(sf)
library(sf)
View(sites)
coords <- data.frame(x=sites$Long,y=sites$Lat)
points <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
library(sf)
points <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
library(raster)
#northern sites
r <- getData("worldclim",var="bio",res=0.5, lon = sites[1,3], lat = sites[1,2])
#northern sites
r <- getData("worldclim",var="bio",res=0.5, lon = sites[1,5], lat = sites[1,4])
sites <- st_as_sf(sites, coords=c("Long","Lat"), crs=4326)
plot(sites)
st_write(sites, "studysites.shp")
#read in bioclim data from other repo
env <- terra::rast("â€ªF:\CH2_ant-plant_mutualism_synthesis\na_rasters.grd")
#read in bioclim data from other repo
env <- terra::rast("F:\CH2_ant-plant_mutualism_synthesis\na_rasters.grd")
#read in bioclim data from other repo
env <- terra::rast("F:/CH2_ant-plant_mutualism_synthesis/na_rasters.grd")
plot(env)
summary(env)
env
sites <- terra::extract(env, sites)
View(sites)
sites <- read.csv("Raw Data/sites.csv")
sites <- st_as_sf(sites, coords=c("Long","Lat"), crs=4326)
plot(sites)
st_write(sites, "studysites.shp")
climsites <- terra::extract(env, sites)
sites <- cbind(climsites, sites)
# Print the results data frame
print(results_df)
# Set seed for reproducibility
set.seed(123)
# Define the range of sample sizes to test
sample_sizes <- seq(50, 300, by = 25) # Test from 50 to 300 in steps of 25
# Create an empty data frame to store the results
results_df <- data.frame(Sample_Size = numeric(), P_Value_RDM_Biomass = numeric())
# Loop through each sample size
for (n_test in sample_sizes) {
# Simulate Shrub microsite
shrub_microsite <- factor(sample(c("shrub", "open"), n_test, replace = TRUE))
# Simulate RDM biomass
rdm_biomass <- round(runif(n_test, 0, 15), 2)
# Simulate RDM cover
rdm_cover <- sample(0:100, n_test, replace = TRUE)
# Define the coefficients (RDM biomass coefficient back to original)
intercept <- 4.5  # Need to estimate the intercept
coef_shrub <- 0.177
coef_rdm_biomass <- -0.004 # Original coefficient
coef_rdm_cover <- 0.0003
# Calculate the linear predictor
linear_predictor <- intercept +
ifelse(shrub_microsite == "shrub", coef_shrub, 0) +
coef_rdm_biomass * rdm_biomass +
coef_rdm_cover * rdm_cover
# Calculate the expected mean (lambda) on the original scale
expected_mean <- exp(linear_predictor)
# Simulate species richness using a Poisson distribution
species_richness <- rpois(n_test, lambda = expected_mean)
# Ensure species richness is within the observed range
species_richness[species_richness > 159] <- 159
# Create the data frame
simulated_data_test <- data.frame(
Shrub_microsite = shrub_microsite,
RDM_biomass = rdm_biomass,
RDM_cover = rdm_cover,
Species_richness = species_richness
)
# Fit the generalized linear model
model_test <- glm(Species_richness ~ Shrub_microsite + RDM_biomass + RDM_cover,
data = simulated_data_test, family = poisson)
# Extract the p-value for RDM biomass
p_value_rdm <- summary(model_test)$coefficients["RDM_biomass", "Pr(>|z|)"]
# Add the results to the data frame
results_df <- rbind(results_df, data.frame(Sample_Size = n_test, P_Value_RDM_Biomass = p_value_rdm))
}
# Print the results data frame
print(results_df)
# --- Optional: Create a plot of p-value vs. sample size ---
plot(results_df$Sample_Size, results_df$P_Value_RDM_Biomass,
type = "b", # "b" for both points and lines
xlab = "Sample Size",
ylab = "P-value for RDM Biomass",
main = "P-value of RDM Biomass vs. Sample Size",
abline(h = 0.05, col = "red", lty = 2) # Add a horizontal line at significance level 0.05
)
# 1. Data Import and Initial Exploration
data <- read.csv("F:/archive projects/rdm.gradient/clean_data/cov.csv", header = TRUE)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lme4) # For mixed-effects models
library(MuMIn) # For model selection (AICc)
library(performance) # For checking model assumptions
# 1. Data Import and Initial Exploration
data <- read.csv("F:/archive projects/rdm.gradient/clean_data/cov.csv", header = TRUE)
# Inspect the data
str(data)
head(data)
summary(data)
# Check for missing values
colSums(is.na(data))
# 2. Data Cleaning and Preprocessing
# Convert Microsite to a factor
data$Microsite <- as.factor(data$Microsite)
# 3. Exploratory Data Analysis (EDA)
# Visualize distributions of response variables
hist(data$abun, main = "Distribution of Insect Abundance")
plot(density(data$abun), main = "Density of Insect Abundance")
# Compare distributions across Microsite levels
boxplot(abun ~ Microsite, data = data, main = "Abundance by Microsite")
boxplot(Species ~ Microsite, data = data, main = "Species Richness by Microsite")
# Examine relationships
plot(data$RDM, data$abun, main = "Abundance vs. RDM")
plot(data$rdm.cov, data$abun, main = "Abundance vs. RDM Cover")
plot(data$RDM, data$Species, main = "Species Richness vs. RDM")
plot(data$rdm.cov, data$Species, main = "Species Richness vs. RDM Cover")
# Assess collinearity
cor(data$RDM, data$rdm.cov, use = "complete.obs")
# Model 1: Influence of Microsite (with random effect of Site)
model_abun_microsite_me <- glmer(abun ~ Microsite + (1|site), data = data, family = poisson())
summary(model_abun_microsite_me)
performance::check_overdispersion(model_abun_microsite_me) # Check for overdispersion
model_species_microsite_me <- glmer(Species ~ Microsite + (1|site), data = data, family = poisson())
summary(model_species_microsite_me)
# If overdispersion is present, consider negative binomial family
# Example (using glmer.nb from lme4.0):
model_abun_microsite_me_nb <- glmer.nb(abun ~ Microsite + (1|site), data = data)
summary(model_abun_microsite_me_nb)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lme4) # For mixed-effects models
library(MuMIn) # For model selection (AICc)
library(performance) # For checking model assumptions
# 1. Data Import and Initial Exploration
data <- read.csv("F:/archive projects/rdm.gradient/clean_data/cov.csv", header = TRUE)
# Inspect the data
str(data)
head(data)
summary(data)
# Check for missing values
colSums(is.na(data))
# 2. Data Cleaning and Preprocessing
# Convert Microsite to a factor
data$Microsite <- as.factor(data$Microsite)
# Handle missing RDM for open microsites - keep as NA or replace with 0 (with caution)
# For this workflow, we'll keep them as NA for now
# 3. Exploratory Data Analysis (EDA)
# Visualize distributions of response variables
hist(data$abun, main = "Distribution of Insect Abundance")
plot(density(data$abun), main = "Density of Insect Abundance")
hist(data$Species, main = "Distribution of Species Richness")
plot(density(data$Species), main = "Density of Species Richness")
# Visualize distributions of predictor variables
hist(data$RDM, main = "Distribution of RDM")
plot(density(data$RDM, na.rm = TRUE), main = "Density of RDM")
hist(data$rdm.cov, main = "Distribution of RDM Cover")
plot(density(data$rdm.cov, na.rm = TRUE), main = "Density of RDM Cover")
# Compare distributions across Microsite levels
boxplot(abun ~ Microsite, data = data, main = "Abundance by Microsite")
boxplot(Species ~ Microsite, data = data, main = "Species Richness by Microsite")
# Examine relationships
plot(data$RDM, data$abun, main = "Abundance vs. RDM")
plot(data$rdm.cov, data$abun, main = "Abundance vs. RDM Cover")
plot(data$RDM, data$Species, main = "Species Richness vs. RDM")
plot(data$rdm.cov, data$Species, main = "Species Richness vs. RDM Cover")
# Check for outliers (visual inspection of plots)
# Assess collinearity
cor(data$RDM, data$rdm.cov, use = "complete.obs")
# 4. Statistical Modeling (Mixed-Effects Models)
# Model 1: Influence of Microsite (with random effect of Site)
model_abun_microsite_me <- glmer(abun ~ Microsite + (1|site), data = data, family = poisson())
summary(model_abun_microsite_me)
# Check model assumptions (residuals)
plot(resid(model_abun_microsite_me) ~ fitted(model_abun_microsite_me))
qqnorm(resid(model_abun_microsite_me))
qqline(resid(model_abun_microsite_me))
performance::check_overdispersion(model_abun_microsite_me) # Check for overdispersion
model_species_microsite_me <- glmer(Species ~ Microsite + (1|site), data = data, family = poisson())
summary(model_species_microsite_me)
plot(resid(model_species_microsite_me) ~ fitted(model_species_microsite_me))
qqnorm(resid(model_species_microsite_me))
qqline(resid(model_species_microsite_me))
performance::check_overdispersion(model_species_microsite_me)
# If overdispersion is present, consider negative binomial family
# Example (using glmer.nb from lme4.0):
model_abun_microsite_me_nb <- glmer.nb(abun ~ Microsite + (1|site), data = data)
summary(model_abun_microsite_me_nb)
# Model 2: Influence of Continuous Vegetation Variables (with random effect of Site)
model_abun_rdm_me <- glmer(abun ~ RDM + (1|site), data = data, family = poisson())
summary(model_abun_rdm_me)
model_abun_rdmcov_me <- glmer(abun ~ rdm.cov + (1|site), data = data, family = poisson())
summary(model_abun_rdmcov_me)
model_species_rdm_me <- glmer(Species ~ RDM + (1|site), data = data, family = poisson())
summary(model_species_rdm_me)
model_species_rdmcov_me <- glmer(Species ~ rdm.cov + (1|site), data = data, family = poisson())
summary(model_species_rdmcov_me)
# Model 3: Combined Influence (with random effect of Site)
model_abun_combined_me <- glmer(abun ~ Microsite + RDM + (1|site), data = data, family = poisson())
summary(model_abun_combined_me)
model_species_combined_me <- glmer(Species ~ Microsite + rdm.cov + (1|site), data = data, family = poisson())
summary(model_species_combined_me)
# Model 4: Interactions (with random effect of Site)
model_abun_interaction_me <- glmer(abun ~ Microsite * RDM + (1|site), data = data, family = poisson())
summary(model_abun_interaction_me)
model_species_interaction_me <- glmer(Species ~ Microsite * rdm.cov + (1|site), data = data, family = poisson())
summary(model_species_interaction_me)
# 5. Model Evaluation and Selection
# Create a list of models to compare for abundance
abun_models <- list(
model_abun_microsite_me = model_abun_microsite_me,
model_abun_rdm_me = model_abun_rdm_me,
model_abun_rdmcov_me = model_abun_rdmcov_me,
model_abun_combined_me = model_abun_combined_me,
model_abun_interaction_me = model_abun_interaction_me
)
# Use AICc for model selection (appropriate for smaller datasets)
abun_aic_table <- AICc(abun_models)
# Use AICc for model selection (appropriate for smaller datasets)
abun_aic_table <- AICc(abun_models)
print("AICc table for Abundance models:")
print(abun_aic_table)
# Use AICc for model selection (appropriate for smaller datasets)
abun_aic_table <- AICc(abun_models)
library(sp)
library(spatstat)
# Load the data directly into a data frame
shrub_data <- read.table(text = "FID,FID_,Species,Name,Width,Length,Height,Transect,QN,QL,X,Y,Notes,sp_simp,Type,easting,northing,ID,MapID,buff
1047,7,amb.sal, ,100,80,87,4,8,R,0,0, ,amb.sal,shrub,622470.744,3849250.552,0,8,0.5
1051,10,amb.sal, ,84,105,76,4,8,R,0,0, ,amb.sal,shrub,622470.994,3849253.252,0,11,0.42
1081,41,amb.sal, ,66,45,69,4,8,L,0,0, ,amb.sal,shrub,622481.244,3849245.602,0,42,0.33
1089,49,amb.sal, ,57,31,55,4,8,L,0,0, ,amb.sal,shrub,622480.594,3849250.352,0,50,0.285
1091,50,amb.sal, ,60,54,40,4,8,L,0,0, ,amb.sal,shrub,622483.244,3849251.352,0,51,0.3
1092,51,amb.sal, ,67,75,50,4,8,L,0,0, ,amb.sal,shrub,622483.394,3849252.202,0,52,0.335
1093,52,amb.sal, ,43,33,40,4,8,L,0,0, ,amb.sal,shrub,622483.844,3849252.502,0,53,0.215
1098,57,amb.sal, ,53,32,61,4,8,L,0,0, ,amb.sal,shrub,622484.894,3849254.402,0,58,0.265
1099,59,amb.sal, ,48,50,45,4,8,L,0,0, ,amb.sal,shrub,622484.944,3849251.352,0,60,0.24
1103,62,amb.sal, ,51,39,52,4,8,L,0,0, ,amb.sal,shrub,622485.344,3849253.452,0,63,0.255
1104,63,amb.sal, ,23,14,22,4,8,L,0,0, ,amb.sal,shrub,622485.144,3849253.352,0,64,0.115
1107,66,amb.sal, ,45,62,71,4,8,L,0,0, ,amb.sal,shrub,622488.394,3849252.752,0,67,0.225
1110,69,amb.sal, ,57,39,43,4,8,L,0,0, ,amb.sal,shrub,622488.644,3849251.452,0,70,0.285
1114,73,amb.sal, ,61,86,63,4,8,L,0,0, ,amb.sal,shrub,622488.694,3849249.552,0,74,0.305
1115,74,amb.sal, ,61,64,56,4,8,L,0,0, ,amb.sal,shrub,622487.844,3849249.002,0,75,0.305
1117,76,amb.sal, ,61,48,52,4,8,L,0,0, ,amb.sal,shrub,622489.994,3849248.852,0,77,0.305
1120,79,amb.sal, ,60,56,54,4,8,L,0,0, ,amb.sal,shrub,622488.844,3849246.452,0,80,0.3
1121,80,amb.sal, ,46,40,33,4,8,L,0,0, ,amb.sal,shrub,622488.044,3849246.052,0,81,0.23
1122,81,amb.sal, ,125,63,74,4,8,L,0,0, ,amb.sal,shrub,622488.144,3849245.802,0,82,0.625
1123,82,amb.sal, ,70,74,40,4,8,L,0,0, ,amb.sal,shrub,622489.044,3849245.152,0,83,0.35
1124,83,amb.sal, ,20,17,20,4,8,L,0,0, ,amb.sal,shrub,622488.194,3849248.352,0,84,0.1
1125,84,amb.sal, ,88,78,48,4,8,L,0,0, ,amb.sal,shrub,622488.494,3849244.752,0,85,0.44
1126,85,amb.sal, ,70,63,55,4,8,L,0,0, ,amb.sal,shrub,622486.394,3849246.002,0,86,0.35
1128,0,amb.sal, ,80,60,69,4,0, ,0,0, ,amb.sal,shrub,622485.544,3849246.602,0,0,0.4
1132,90,amb.sal, ,132,107,65,4,8,L,0,0, ,amb.sal,shrub,622486.1164,3849249.362,0,91,0.66
1134,93,amb.sal, ,103,94,68,4,8,L,0,0, ,amb.sal,shrub,622485.1313,3849248.324,0,94,0.515
1136,95,amb.sal, ,34,37,23,4,8,L,0,0, ,amb.sal,shrub,622484.3813,3849249.324,0,96,0.17
1140,99,amb.sal, ,124,90,75,4,7,R,0,0, ,amb.sal,shrub,622474.144,3849258.152,0,100,0.62
1149,107,amb.sal, ,57,76,44,4,7,R,0,0, ,amb.sal,shrub,622470.544,3849260.402,0,108,0.285
1075,34,lar.tri, ,287,318,175,4,8,R,0,0, ,lar.tri,shrub,622478.894,3849246.752,0,35,1.4349999
1119,78,lar.tri, ,245,255,230,4,8,L,0,0, ,lar.tri,shrub,622489.894,3849247.452,0,79,1.225
1192,149,lar.tri, ,245,185,166,4,7,L,0,0, ,lar.tri,shrub,622482.294,3849261.802,0,150,1.225
1234,191,lar.tri, ,457,460,225,4,6,R,0,0, ,lar.tri,shrub,622471.594,3849269.752,0,192,2.2850001
1265,219,lar.tri, ,167,200,129,4,6,L,0,0, ,lar.tri,shrub,622483.844,3849267.452,0,220,0.835
1266,220,lar.tri, ,406,285,174,4,6,L,0,0, ,lar.tri,shrub,622483.894,3849269.752,0,221,2.03
1277,231,lar.tri, ,238,127,157,4,6,L,0,0, ,lar.tri,shrub,622486.294,3849269.852,0,232,1.1900001
1279,233,lar.tri, ,568,456,262,4,6,L,0,0, ,lar.tri,shrub,622488.294,3849267.352,0,234,2.8399999
1283,236,lar.tri, ,420,433,205,4,5,R,0,0, ,lar.tri,shrub,622474.494,3849278.152,0,237,2.0999999
1284,237,lar.tri, ,102,94,135,4,5,R,0,0, ,lar.tri,shrub,622473.244,3849280.152,0,238,0.51
1285,238,lar.tri, ,454,529,214,4,5,R,0,0, ,lar.tri,shrub,622472.794,3849282.752,0,239,2.27
1293,246,lar.tri, ,106,80,38,4,5,R,0,0, ,lar.tri,shrub,622479.344,3849279.502,0,247,0.53
1296,249,lar.tri, ,398,403,223,4,5,R,0,0, ,lar.tri,shrub,622478.244,3849278.952,0,250,1.99
1324,277,lar.tri, ,457,287,234,4,5,L,0,0, ,lar.tri,shrub,622487.044,3849279.402,0,278,2.2850001
1330,283,lar.tri, ,380,315,240,4,4,R,0,0, ,lar.tri,shrub,622472.594,3849285.652,0,284,1.9
1411,363,lar.tri, ,450,360,264,4,4,L,0,0, ,lar.tri,shrub,622485.044,3849286.452,0,364,2.25
1456,408,lar.tri, ,324,285,219,4,3,R,0,0, ,lar.tri,shrub,622475.844,3849299.402,0,409,1.62
1458,410,lar.tri, ,324,285,219,4,3,L,0,0, ,lar.tri,shrub,622482.544,3849294.752,0,411,1.62
1459,411,lar.tri, ,310,150,160,4,3,L,0,0, ,lar.tri,shrub,622481.594,3849297.002,0,412,1.55
1531,487,lar.tri, ,310,320,180,4,2,R,0,0, ,lar.tri,shrub,622478.544,3849315.502,0,488,1.55
1561,517,lar.tri, ,390,448,275,4,2,L,0,0, ,lar.tri,shrub,622481.694,3849309.252,0,518,1.95
1728,0,lar.tri, ,353,299,220,4,0, ,0,0, ,lar.tri,shrub,622475.3585,3849280.221,0,0,1.765", header = TRUE)
library(ggplot2)
a <- runif(20, 1, 5)
b <- runif(20, 3, 10)
c <- runif(20, 8, 13)
df <- cbind(a, b, c)
View(df)
a <- runif(20, 90, 100)
b <- runif(20, 100, 120)
c <- runif(20, 250, 300)
df <- cbind(a, b, c)
library(tidyr)
df <- pivot_longer(df, names_to = "sample")
df <- as.data.frame(Df)
df <- as.data.frame(df)
df <- pivot_longer(df, names_to = "sample")
df <- pivot_longer(df, 1:3, names_to = "sample")
ggplot(df, aes(sample, value)) + geom_boxplot()
ggplot(df, aes(sample, value)) + geom_boxplot() + ylab("Stomatal Density (No./mm^2)")
